pipeline {
    agent { label 'built-in' }
    environment {
        JENKINS_URL = 'http://localhost:8080'
        WORKSPACE = "${env.JENKINS_MASTER_HOME_DIRECTORY}/workspace/casc-pipeline"
        JENKINS_CASC_DIR = "${env.JENKINS_MASTER_HOME_DIRECTORY}/casc"
    }
    stages {
        stage('Validate JCasC syntax') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkins-api-user', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD')]) {
                    sh '''
                set -e

                echo "üîê Getting CSRF crumb..."
                CRUMB_JSON=$(curl -s -u $JENKINS_USER:$JENKINS_PASSWORD -c /tmp/cookie.txt $JENKINS_URL/crumbIssuer/api/json)
                CRUMB=$(curl -s -u $JENKINS_USER:$JENKINS_PASSWORD -c /tmp/cookie.txt \
                        $JENKINS_URL/crumbIssuer/api/json | jq -r '.crumb')

                for file in $(find $WORKSPACE/jenkins_home/casc -type f -name '*.yaml'); do
                    echo -e "üîç Checking: $file"
                    HTTP_CODE=$(curl -s -o /tmp/resp.txt -w "%{http_code}" \
                        -u $JENKINS_USER:$JENKINS_PASSWORD \
                        -b /tmp/cookie.txt \
                        -H "Jenkins-Crumb: $CRUMB" \
                        -H "Content-Type: text/yaml" \
                        -X POST "$JENKINS_URL/configuration-as-code/check" \
                        -T "$file")

                    if [ "$HTTP_CODE" != "200" ]; then
                        echo -e "‚ùå Validation failed for $file"
                        echo "------ Error Details ------"
                        cat /tmp/resp.txt
                        echo "----------------------------"
                        exit 1
                    else
                        echo -e "‚úÖ Validation succeeded for $file"
                    fi
                done
                '''
                }
            }
        }

        stage('Deploy new JCasC files') {
            steps {
                sh '''
                echo "Deploying validated YAMLs to $JENKINS_CASC_DIR ..."
                rm -rf $JENKINS_CASC_DIR/*
                cp -rf $WORKSPACE/jenkins_home/casc/* $JENKINS_CASC_DIR/
                ls -l $JENKINS_CASC_DIR
                '''
            }
        }

        stage('Apply JCasC configuration') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkins-api-user', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_PASSWORD')]) {
                    sh '''
                    set -e

                    echo "Apply new JCasC Configuration"
                    curl -u $JENKINS_USER:$JENKINS_PASSWORD -X POST "$JENKINS_URL/reload-configuration-as-code/?casc-reload-token=$CASC_RELOAD_TOKEN"
                    
                    if [ $? -ne 0 ]; then
                        echo "‚ùå Failed to apply JCasC configuration"
                        exit 1
                    else
                        echo "‚úÖ JCasC configuration applied successfully"
                    fi
                    '''
                }
            }
        }
    }
}
